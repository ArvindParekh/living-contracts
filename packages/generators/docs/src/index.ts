import path from 'path';
import { Project } from 'ts-morph';
import { DMMF } from '@prisma/client/runtime/library.js';

export interface ValidationRule {
  field: string;
  type: string;
  min?: number;
  max?: number;
  pattern?: string;
  nullable: boolean;
  unique: boolean;
  examples: any[];
}

export interface ParsedSchema {
  models: DMMF.Model[];
  enums: DMMF.DatamodelEnum[];
  datasources: any[];
}

export interface DocsContext {
  tsProject: Project;
  parsedSchema: ParsedSchema;
  validationRules: Map<string, ValidationRule[]>;
  outputBaseDir: string;
}

export class DocsGenerator {
  constructor(private ctx: DocsContext) {}

  public generate(): string[] {
    const files: string[] = [];
    const { parsedSchema, validationRules, outputBaseDir } = this.ctx;

    const modelDocs = parsedSchema.models
      .map((model) => {
        const rules = validationRules.get(model.name) || [];
        const fields = model.fields
          .map((field: any) => {
            const rule = rules.find((r) => r.field === field.name);
            let constraints = '';
            if (rule) {
              if (rule.min !== undefined || rule.max !== undefined) {
                constraints += ` (${rule.min || 0}-${rule.max || 'âˆž'})`;
              }
              if (rule.pattern) constraints += ` Pattern: \`${rule.pattern}\``;
              if (rule.examples?.length) {
                constraints += `\n    Examples: ${rule.examples.slice(0, 3).map((e) => `\`${e}\``).join(', ')}`;
              }
            }
            return `- **${field.name}** (\`${field.type}${!field.isRequired ? '?' : ''}\`)${constraints}`;
          })
          .join('\n');

        return `## ${model.name}\n\n### Fields\n${fields}\n\n### Endpoints\n- \`GET /${this.pluralize(model.name.toLowerCase())}\` - List all ${model.name} records\n- \`GET /${this.pluralize(model.name.toLowerCase())}/:id\` - Get a single ${model.name}\n- \`POST /${this.pluralize(model.name.toLowerCase())}\` - Create a new ${model.name}\n- \`PATCH /${this.pluralize(model.name.toLowerCase())}/:id\` - Update a ${model.name}\n- \`DELETE /${this.pluralize(model.name.toLowerCase())}/:id\` - Delete a ${model.name}`;
      })
      .join('\n---\n\n');

    const content = `# API Documentation\n\nGenerated by Living Contracts on ${new Date().toLocaleDateString()}\n\n## Overview\n\nThis document describes the auto-generated API based on your Prisma schema.\n\n${modelDocs}`;

    this.ctx.tsProject.createSourceFile(path.join(outputBaseDir, 'README.md'), content, { overwrite: true });
    files.push('docs/README.md');
    return files;
  }

  private pluralize(str: string): string {
    if (str.endsWith('y')) return str.slice(0, -1) + 'ies';
    if (str.endsWith('s')) return str + 'es';
    return str + 's';
  }
}
